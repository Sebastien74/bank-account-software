<?php

declare(strict_types=1);

namespace App\Controller;

use App\Entity\Core\Domain;
use App\Entity\Layout\Page;
use App\Entity\Media\Media;
use App\Entity\Media\MediaIntl;
use App\Entity\Module\Search\Embedding;
use App\Entity\Module\Search\Search;
use App\Entity\Seo\Url;
use Doctrine\ORM\Mapping\MappingException;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query\QueryException;
use Psr\Cache\InvalidArgumentException;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

/**
 * AIController.
 *
 * @author Sébastien FOURNIER <fournier.sebastien@outlook.com>
 */
class AIController extends BaseController
{
    private array $customOptions = [];

    /**
     * Remove all AI embeddings for a given locale.
     *
     * Used to reset or clean embeddings generated by AI for the specified language.
     * Redirects back to the referring page once done.
     */
    #[Route('/ai/api/remove-embeddings', name: 'ai_api_remove_embeddings', options: ['isMainRequest' => false], methods: 'GET', schemes: '%protocol%')]
    public function removeEmbeddings(Request $request): \Symfony\Component\HttpFoundation\RedirectResponse
    {
        // Get the target locale from query string or fallback to request locale
        $locale = $_GET['locale'] ?? $request->getLocale();

        // Fetch all Embedding entities matching the locale
        $embeddings = $this->coreLocator->em()->getRepository(Embedding::class)->findBy(['locale' => $locale]);

        // Remove each embedding from the database
        foreach ($embeddings as $embedding) {
            $this->coreLocator->em()->remove($embedding);
        }

        // Persist the deletions
        $this->coreLocator->em()->flush();

        // Redirect the user back to the referring URL
        return $this->redirect($request->headers->get('referer'));
    }

    /**
     * Run a specific AI tool via the Felix API.
     *
     * Supported tools:
     * Tool 1 : Chatbot
     * Tool 2 : SEO Meta Title and Description
     * Tool 3 : Analyze Page
     * Tool 4 : Analyze Image
     *
     * Validates request, prepares context, executes AI call, then handles post-processing.
     *
     * @throws InvalidArgumentException|NonUniqueResultException|MappingException|\ReflectionException|QueryException
     */
    #[Route('/ai/api/run', name: 'ai_api_run', options: ['isMainRequest' => false], methods: 'GET|POST', schemes: '%protocol%')]
    public function apiRun(Request $request): JsonResponse
    {
        // Flag to allow the API to be executed, can be disabled in handleBeforeResponse
        $this->customOptions['run-api'] = true;

        // Pre-processing before calling the AI API (media/URL checks, fallback paths, etc.)
        $this->handleBeforeResponse($request);

        // If API execution is blocked (e.g. placeholder exists), return 400
        if (!$this->customOptions['run-api']) {
            return new JsonResponse([
                'httpCode' => Response::HTTP_BAD_REQUEST,
                'message' => "This request don't run the api",
            ]);
        }

        // Call the Felix AI API service with request context
        $response = $this->coreLocator->ai()->runApi($request);

        // Post-processing after the response (e.g. save alt, restore URL status)
        $this->handleAfterResponse($request, $response);

        // Return the final API response as JSON
        return new JsonResponse($response);
    }

    /**
     * Pre-process the request before running the AI API.
     *
     * @throws InvalidArgumentException|NonUniqueResultException|MappingException|\ReflectionException|QueryException
     */
    private function handleBeforeResponse($request): void
    {
        // TOOL 4: Image analysis — skip API call if placeholder already exists
        if ($request->query->get('tool') == 4) {
            $media = $this->coreLocator->em()->getRepository(Media::class)->find($request->query->get('mediaId'));
            foreach ($media->getIntls() as $mediaIntl) {
                if ($mediaIntl->getLocale() == $request->query->get('locale')) {
                    if ($mediaIntl->getPlaceholder()) {
                        $this->customOptions['run-api'] = false;
                    } else {
                        $this->customOptions['run-api'] = true;
                    }
                }
            }
        }

        // TOOL 4: Stop and return 400 if mediaId is missing
        if ($request->query->get('tool') == 4 && !$request->query->get('mediaId')) {
            new JsonResponse([
                'httpCode' => Response::HTTP_BAD_REQUEST,
                'tool' => 4,
                'message' => 'mediaId needed.',
                'response' => null,
            ]);
            return;
        }

        // TOOL 2/3/6: Temporarily put the URL online if it's offline to allow analysis
        if (
            in_array($request->query->get('tool'), [2, 3, 6]) &&
            $request->query->get('url')
        ) {
            $urlObject = $this->coreLocator->em()->getRepository(Url::class)->find($request->query->get('url'));
            $isDraft = !$urlObject->isOnline();
            $this->customOptions['isDraft'] = $isDraft;
            $this->customOptions['urlObject'] = $urlObject;

            if ($isDraft) {
                $urlObject->setOnline(true);
                $this->coreLocator->em()->persist($urlObject);
                $this->coreLocator->em()->flush();
            }
        }

        // TOOL 2: Auto-fill urlPath if missing by running the SEO service
        if ($request->query->get('tool') == 2 && !$request->query->get('urlPath')) {
            if ($request->query->get('url')) {
                $url = $this->coreLocator->em()->getRepository(Url::class)->find($request->query->get('url'));
                $entity = $this->coreLocator->em()->getRepository($request->query->get('class'))->find($request->query->get('entityId'));
                $seo = $this->coreLocator->seoService()->execute($url, $entity, $request->query->get('locale'));
                $request->query->set('urlPath', $seo['canonical']);
            }
        }
    }

    /**
     * Post-process the response after running the AI API.
     */
    private function handleAfterResponse($request, $response): void
    {
        // If tool is Chatbot (tool 1) and request succeeded, set cookie for history
        if (
            $request->query->get('tool') == 1 &&
            $response['httpCode'] == Response::HTTP_OK &&
            isset($response['response']['cookie-chatbot'])
        ) {
            setcookie("cookie-chatbot", $response['response']['cookie-chatbot'], time() + (86400 * 30), "/");
        }

        // If tool is Image SEO (tool 4) and request succeeded, handle alt saving
        if ($request->query->get('tool') == 4 && $response['httpCode'] == Response::HTTP_OK) {

            // Check if we should save the alt (default = true)
            $save = !($request->query->get('save') === '0');

            if ($save) {

                $media = $this->coreLocator->em()->getRepository(Media::class)->find($request->query->get('mediaId'));
                $hasIntl = false;

                // Try to update existing MediaIntl for the locale
                foreach ($media->getIntls() as $mediaIntl) {
                    if ($mediaIntl->getLocale() == $request->query->get('locale')) {
                        if (!$mediaIntl->getPlaceholder()) {
                            $mediaIntl->setPlaceholder($response['response']['alt']);
                            $this->coreLocator->em()->persist($mediaIntl);
                            $this->coreLocator->em()->flush();
                        }
                        $hasIntl = true;
                    }
                }

                // If no MediaIntl exists, create a new one
                if (!$hasIntl) {
                    $mediaIntl = new MediaIntl();
                    $mediaIntl->setMedia($media);
                    $mediaIntl->setLocale($request->query->get('locale'));
                    $mediaIntl->setWebsite($this->getWebsite()->entity);
                    $mediaIntl->setPlaceholder($response['response']['alt']);
                    $this->coreLocator->em()->persist($mediaIntl);
                    $this->coreLocator->em()->flush();
                }
            }
        }

        // Restore URL to offline if it was set online temporarily
        if (isset($this->customOptions['isDraft']) && $this->customOptions['isDraft']) {
            $urlObject = $this->customOptions['urlObject'];
            $urlObject->setOnline(false);
            $this->coreLocator->em()->persist($urlObject);
            $this->coreLocator->em()->flush();
        }
    }

    /**
     * Return the list of available media full paths and locales.
     */
    #[Route('/ai/api/get-medias', name: 'ai_api_run_get_medias', options: ['isMainRequest' => false], methods: 'GET', schemes: '%protocol%')]
    public function apiGetMedias(Request $request): JsonResponse
    {
        // Get the main domain used to build absolute media URLs
        $mainDomain = $this->coreLocator->em()->getRepository(Domain::class)->findOneBy(['asDefault' => true]);

        // Retrieve the current website context and its online locales
        $website = $this->getWebsite();
        $listOfMedias = [];
        $locales = is_array($website->configuration->onlineLocales) ? array_values($website->configuration->onlineLocales) : [];

        // Define folders to ignore when listing media files
        $unAuthorizedFolders = [
            'webmaster',
            'default-media',
            'gdpr',
            'map',
        ];

        // Get either a single media (if mediaId is provided) or all medias for the website
        if ($request->query->get('mediaId')) {
            $medias = [$this->coreLocator->em()->getRepository(Media::class)->find($request->query->get('mediaId'))];
        } else {
            $medias = $this->coreLocator->em()->getRepository(Media::class)->findBy(['website' => $website->id]);
        }

        // Loop through each media and build full path if valid and not excluded
        foreach ($medias as $media) {
            $accessToGenerate = true;

            // Skip media in unauthorized folders
            if ($media->getFolder() && in_array($media->getFolder()->getSlug(), $unAuthorizedFolders)) {
                $accessToGenerate = false;
            }

            // Build full path only for non-SVG valid media files
            if ($accessToGenerate && $media->getFilename() &&
                (
                    $media->getExtension() == 'png' ||
                    $media->getExtension() == 'jpg' ||
                    $media->getExtension() == 'jpeg' ||
                    $media->getExtension() == 'webp' ||
                    $media->getExtension() == 'gif'
                )
            ) {
                $fullPath = 'https://' . $mainDomain->getName() . '/uploads/' . $media->getWebsite()->getUploadDirname() . '/' . $media->getFilename();
                $listOfMedias[] = [
                    'id' => $media->getId(),
                    'fullPath' => $fullPath
                ];
            }
        }

        // Return media list along with locales and count of combinations
        return new JsonResponse([
            'httpCode' => Response::HTTP_OK,
            'tool' => 4,
            'message' => null,
            'response' => [
                'locales' => $locales,
                'medias' => $listOfMedias,
                'count' => count($listOfMedias) * count($locales),
            ],
        ]);
    }

    /**
     * Search for similar embeddings using cosine similarity.
     */
    #[Route('/ai/api/search-embedding', name: 'ai_search_embedding', options: ['isMainRequest' => false], methods: 'GET', schemes: '%protocol%')]
    public function aiSearchEmbedding(Request $request): JsonResponse
    {
        $locale = $request->get('locale') ? $request->get('locale') : 'fr';
        $embeddings = $this->coreLocator->em()->getRepository(Embedding::class)->findBy(['locale' => $locale]);
        $autoCompletions = [];

        if ($embeddings) {

            $queryEmbeddingResp = $this->coreLocator->ai()->runApi($request);
            $queryEmbedding = $queryEmbeddingResp['response'] ?? [];
            $similarities = [];

            foreach ($embeddings as $embedding) {
                $entityVar = $embedding->getEntityVar();
                $similarity = $this->coreLocator->ai()->cosineSimilarity($queryEmbedding, $embedding->getEmbedding());
                if ($entityVar === 'title') {
                    $similarity *= 1.2;
                } else if ($entityVar === 'subTitle') {
                    $similarity *= 1.1;
                }
                $similarities[] = [
                    'embedding' => $embedding,
                    'similarity' => $similarity,
                ];
            }

            usort($similarities, function ($a, $b) {
                return $b['similarity'] <=> $a['similarity'];
            });

            $topResults = array_slice($similarities, 0, 20);
            foreach ($topResults as $topResult) {
                $embedding = $topResult['embedding'];
                $similarity = $topResult['similarity'];
                if ($similarity > 0.40) {
                    $entity = $this->coreLocator->em()->getRepository($embedding->getEntityType())->find($embedding->getEntityId());
                    if ($entity) {
                        foreach ($entity->getIntls() as $intl) {
                            if ($intl->getLocale() == $locale) {
                                if ($intl->getTitle()) {
                                    $helper = $this->coreLocator->interfaceHelper()->getConfiguration($embedding->getEntityType());
                                    if ($helper) {
                                        $name = $helper->adminName;
                                        if ($name == 'Bloc') {
                                            $name = $this->coreLocator->translator()->trans('Page', [], 'front');
                                        }
                                        if (!isset($autoCompletions[$name][$intl->getId()])) {
                                            $autoCompletions[$name][$intl->getId()] = [
                                                'label' => $intl->getTitle(),
                                                'type' => $embedding->getEntityType(),
                                                'similarity' => $similarity
                                            ];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            krsort($autoCompletions);

            foreach ($autoCompletions as &$categoryItems) {
                uasort($categoryItems, function ($a, $b) {
                    return $b['similarity'] <=> $a['similarity'];
                });
            }
        }

        return new JsonResponse([
            'httpCode' => Response::HTTP_OK,
            'tool' => 8,
            'message' => null,
            'response' => [
                'completion' => $autoCompletions,
            ],
        ]);
    }

    /**
     * Generate AI embeddings for all configured entities and their localized content.
     *
     * Iterates through each entity listed in the Search configuration and analyzes their
     * translatable fields (title, subtitle, intro, body). Each text block is converted
     * to an embedding and stored in the database if it doesn't already exist.
     *
     * @throws NonUniqueResultException
     */
    #[Route('/ai/api/generate-embedding', name: 'ai_generate_embedding', options: ['isMainRequest' => false], methods: 'GET', schemes: '%protocol%')]
    public function aiGenerateEmbedding(Request $request): JsonResponse
    {
        // Determine the locale (default to 'fr')
        $locale = $request->get('locale') ? $request->get('locale') : 'fr';

        // Retrieve configuration: list of entities to process
        $search = $this->coreLocator->em()->getRepository(Search::class)->find(1);

        foreach ($search->getEntities() as $classname) {

            // Get interface metadata and fetch all entities of this type
            $interface = $this->coreLocator->interfaceHelper()->generate($classname);
            $entities = $this->coreLocator->em()->getRepository($interface['classname'])->findAll();

            foreach ($entities as $entity) {
                $authorize = true;
                // Special rules for Layout\\Block entities
                if ($classname == 'App\\Entity\\Layout\\Block') {
                    if ($entity->getAction()) {
                        $authorize = false;
                    }
                    if ($entity->getBlockType()->getCategory() != 'global') {
                        $authorize = false;
                    }
                    if (!$entity->getCol()) {
                        $authorize = false;
                    }
                    // Check page online status if block is linked to a page
                    $page = $this->coreLocator->em()->getRepository(Page::class)->findByBlock($entity);
                    if ($page) {
                        $authorize = $this->checkPageOnline($page, $locale);
                        if ($page->getSlug() == 'error') {
                            $authorize = false;
                        }
                    }
                }
                // For other entities with URLs, check if page is online
                elseif (property_exists($entity, 'urls')) {
                    $authorize = $this->checkPageOnline($entity, $locale);
                }
                // If authorized and entity has translations (intls)
                if ($authorize && property_exists($entity, 'intls')) {
                    $intls = $entity->getIntls();
                    foreach ($intls as $intl) {
                        if ($intl->getLocale() == $locale) {
                            // Add embedding for each valid content field
                            if ($intl->getTitle()) {
                                $this->checkAndAddEmbedding($request, $entity, strip_tags($intl->getTitle()), 'title', $locale);
                            }
                            if ($intl->getSubTitle()) {
                                $this->checkAndAddEmbedding($request, $entity, strip_tags($intl->getSubTitle()), 'subtitle', $locale);
                            }
                            if ($intl->getIntroduction()) {
                                $this->checkAndAddEmbedding($request, $entity, strip_tags($intl->getIntroduction()), 'introduction', $locale);
                            }
                            if ($intl->getBody()) {
                                $this->checkAndAddEmbedding($request, $entity, strip_tags($intl->getBody()), 'body', $locale);
                            }
                        }
                    }
                }
            }
        }

        // Return success response for tool 8 (embedding generation)
        return new JsonResponse([
            'success' => true,
            'httpCode' => 200,
            'tool' => 8,
        ]);
    }

    /**
     * Create an embedding from the given content if it does not already exist.
     */
    private function checkAndAddEmbedding($request, $entity, $content, $name, $locale): void
    {
        $existingEmbedding = $this->coreLocator->em()->getRepository(Embedding::class)->findOneBy([
            'entityType' => get_class($entity),
            'entityId' => $entity->getId(),
            'entityVar' => $name,
        ]);
        if (!$existingEmbedding) {
            $embeddingResp = $this->coreLocator->ai()->runApi($request, [
                'userkeyword' => $content
            ]);
            $embedding = $embeddingResp['response'] ?? [];
            if ($embedding) {
                $embeddingEntity = new Embedding();
                $embeddingEntity->setEntityType(get_class($entity));
                $embeddingEntity->setEntityId($entity->getId());
                $embeddingEntity->setEmbedding($embedding);
                $embeddingEntity->setEntityVar($name);
                $embeddingEntity->setLocale($locale);
                $this->coreLocator->em()->persist($embeddingEntity);
                $this->coreLocator->em()->flush();
            }
        }
    }

    /**
     * Check if the entity has an online URL for the given locale.
     */
    private function checkPageOnline($entity, $locale)
    {
        if (property_exists($entity, 'urls')) {
            foreach ($entity->getUrls() as $url) {
                if ($url->getLocale() == $locale) {
                    return $url->isOnline();
                }
            }
        }

        return true;
    }
}
