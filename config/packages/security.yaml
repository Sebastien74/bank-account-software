security:

#    enable_authenticator_manager: true

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        user_provider:
            entity:
                class: 'App\Entity\Security\User'
                property: "%env(SECURITY_ADMIN_LOGIN_TYPE)%"
        user_front_provider:
            entity:
                class: 'App\Entity\Security\UserFront'
                property: "%env(SECURITY_FRONT_LOGIN_TYPE)%"
        chain_providers:
            chain:
                providers: [ user_provider, user_front_provider ]

    firewalls:

        image_resolver:
            pattern: ^/media/cache/resolve
            security: false

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        user:
            pattern: ^/(secure/user|admin-%env(SECURITY_TOKEN)%)
            lazy: true
            provider: user_provider
            form_login:
                login_path: front_index
                check_path: security_login
                username_parameter: "%env(SECURITY_ADMIN_LOGIN_TYPE)%"
                enable_csrf: true
                use_forward: true
                use_referer: true
            switch_user: { role: CAN_SWITCH_USER, parameter: _switch_user }
            http_basic: ~
            custom_authenticators:
                - App\Security\LoginFormAuthenticator
            entry_point: App\Security\LoginFormAuthenticator
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 2592000 # 30 days in seconds
                samesite: ~ # possible values: 'strict', 'lax' and null
                remember_me_parameter: '_remember_me'
                always_remember_me: true
                signature_properties: [ password ]
            login_throttling:
                max_attempts: 3
                interval: '15 minutes'

        #        auth_api:
        #            pattern: ^/security/connect/(facebook|google)/check
        #            lazy: true
        #            provider: user_provider
        #            http_basic: ~
        #            custom_authenticators:
        #                - App\Security\ApiAuthenticator
        #            entry_point: App\Security\ApiAuthenticator
        #            remember_me:
        #                secret: '%kernel.secret%'
        #                lifetime: 2592000 # 30 days in seconds
        #                samesite: ~ # possible values: 'strict', 'lax' and null
        #                remember_me_parameter: '_remember_me'
        #                always_remember_me : true

        user_front:
            pattern: ^/(espace-personnel|personal-space|espacio-personal|spazio-personale)/
            lazy: true
            provider: user_front_provider
            form_login:
                login_path: security_front_forms
                check_path: security_front_login
                username_parameter: "%env(SECURITY_FRONT_LOGIN_TYPE)%"
                enable_csrf: true
                use_forward: true
                use_referer: true
            switch_user: { role: CAN_SWITCH_USER, parameter: _switch_user }
            http_basic: ~
            custom_authenticators:
                - App\Security\LoginFrontFormAuthenticator
            entry_point: App\Security\LoginFrontFormAuthenticator
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 2592000 # 30 days in seconds
                samesite: ~ # possible values: 'strict', 'lax' and null
                remember_me_parameter: '_remember_me'
                always_remember_me: true
                signature_properties: [ password ]
            login_throttling:
                max_attempts: 3
                interval: '15 minutes'

        main:
            pattern: ^/
            lazy: true
            provider: chain_providers
            logout:
                path: app_logout
                target: front_index
                invalidate_session: true
            switch_user: { role: CAN_SWITCH_USER, parameter: _switch_user }
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 2592000 # 30 days in seconds
                samesite: ~ # possible values: 'strict', 'lax' and null
                remember_me_parameter: '_remember_me'
                always_remember_me: true
                signature_properties: [ password ]

    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/secure/user', roles: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: '^/(espace-personnel|personal-space|espacio-personal|spazio-personale)/', role: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: '^/admin', roles: [ IS_AUTHENTICATED_FULLY, ROLE_ADMIN ], requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: '^/(mon-espace-personnel|my-personal-space|mi-espacio-personal|mio-spazio-personale)/', roles: ROLE_USER, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: '^/', roles: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }

#when@test:
#    security:
#        password_hashers:
#            # By default, password hashers are resource intensive and take time. This is
#            # important to generate secure password hashes. In tests however, secure hashes
#            # are not important, waste resources and increase test times. The following
#            # reduces the work factor to the lowest possible values.
#            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                algorithm: auto
#                cost: 4 # Lowest possible value for bcrypt
#                time_cost: 3 # Lowest possible value for argon
#                memory_cost: 10 # Lowest possible value for argon